import trenes.*

describe "Bateria de tests"{
	
	const deposito1 = new Deposito()
	const formacion1 = new Formacion()
	const vagon1 = new Vagon(anchoUtil= 30, largo = 30, tipoVagon = new VagonCarga(cargaMax = 15000))
	const vagon2 = new Vagon(anchoUtil= 7, largo = 4, tipoVagon = vagonPasajeros)
	const vagon3 = new Vagon(anchoUtil= 1, largo = 1, tipoVagon = new VagonCarga(cargaMax = 1200))
	
	const formacion2 = new Formacion()
	const vagon4 = new Vagon(anchoUtil= 4, largo = 14, tipoVagon = new VagonCarga(cargaMax = 5000))
	const vagon5 = new Vagon(anchoUtil= 9, largo = 19, tipoVagon = vagonPasajeros)
	const vagon6 = new Vagon(anchoUtil= 1, largo = 3, tipoVagon = vagonPasajeros)
	
	const locomotora1 = new Locomotora(peso= 1000, pesoMaximoLlevado = 70000, velMax = 500)
	const locomotora2 = new Locomotora(peso= 1500, pesoMaximoLlevado = 25000, velMax = 250)
	
	const locomotora3 = new Locomotora(peso= 2500, pesoMaximoLlevado = 1500, velMax = 900)
	const locomotora4 = new Locomotora(peso= 3500, pesoMaximoLlevado = 2000, velMax = 360)
	
	const locomotora5 = new Locomotora(peso= 3500, pesoMaximoLlevado = 45000, velMax = 360)
	
	fixture{
		deposito1.formaciones().add(formacion1)
		formacion1.vagones().add(vagon1)
		formacion1.vagones().add(vagon2)
		formacion1.vagones().add(vagon3)
		formacion1.locomotoras().add(locomotora1)
		formacion1.locomotoras().add(locomotora2)
		
		deposito1.formaciones().add(formacion2)
		formacion2.vagones().add(vagon4)
		formacion2.vagones().add(vagon5)
		formacion2.vagones().add(vagon6)
		formacion2.locomotoras().add(locomotora3)
		formacion2.locomotoras().add(locomotora4)
		
		deposito1.locomotorasSueltas().add(locomotora5)
	}


test "Vagones" {


assert.equals(vagon1.cantidadPasajeros(),0)
assert.equals(vagon2.cantidadPasajeros(),40)
assert.equals(vagon1.pesoMaximo(), 15160)
assert.equals(vagon2.pesoMaximo(), 3200)


	
}

test "Formacion"{
	
//Existencia de elementos
assert.that(formacion1.vagones().contains(vagon1))
assert.that(formacion2.vagones().contains(vagon4))

//Formacion1
assert.that(formacion1.eficiente())
assert.equals(formacion1.velocidadMaxima(),250)
assert.that(formacion1.puedeMoverse())
assert.equals(formacion1.vagonesLivianos(),1)
assert.equals(formacion1.kilosFaltantes(), 0)
assert.equals(formacion1.pesoVagonesYLocomotoras(), 22220)



//Formacion2
assert.notThat(formacion2.eficiente())
assert.equals(formacion2.velocidadMaxima(),360)
assert.notThat(formacion2.puedeMoverse())
assert.equals(formacion2.vagonesLivianos(),1)
assert.equals(formacion2.kilosFaltantes(), 22280)

}

test "Deposito"{
	//En formacion1

assert.that(deposito1.vagonesMasPesados().contains(vagon1))
assert.notThat(deposito1.vagonesMasPesados().contains(vagon3))

	//En Formacion2
	
assert.notThat(deposito1.vagonesMasPesados().contains(vagon6))
assert.that(deposito1.vagonesMasPesados().contains(vagon1))

assert.that(deposito1.locomotorasSueltas().contains(locomotora5))
deposito1.agregaLocomotora(formacion1)
assert.that(deposito1.locomotorasSueltas().contains(locomotora5)) // Persiste porque ya puede moverse.


deposito1.agregaLocomotora(formacion2)

assert.notThat(deposito1.locomotorasSueltas().contains(locomotora5)) // No persiste ya que se agrega la locomotora
assert.that(formacion2.locomotoras().contains(locomotora5)) //Agregada en lista locomotoras


assert.that(deposito1.conductorExperimentado())
}

}
